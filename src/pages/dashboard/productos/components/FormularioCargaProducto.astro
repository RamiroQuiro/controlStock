---
import Button1 from "../../../../components/atomos/Button1.astro";
import FormCont from "../../../../components/atomos/FormCont.astro";
import LabelForm from "../../../../components/atomos/LabelForm.astro";
import ContenedorInputForm from "../../../../components/moleculas/ContenedorInputForm.astro";
import InputFile from "../../../../components/moleculas/InputFile";

const { user } = Astro.props;
---

<FormCont title="Agregar Producto" id="formularioCargaProducto">
  <div
    id="idCargaUsuario"
    data-initUser={user.id}
    class="w-full flex md:flex-col flex-row gap-2 items-start justify-between"
  >
    <ContenedorInputForm
      name="codigoBarra"
      type="text"
      label="codigo de barra"
    />
    <div class="w-full flex items items-start my-2 duration-300 group -md">
      <div class="w-full flex gap-2 items-center justify-center">
        <InputFile client:load name="fotoProducto" />
      </div>
      <div class="w-full flex flex-col gap-2 items-start justify-between">
        <LabelForm name={"descripcion"}>{"descripcion"}</LabelForm>
        <textarea
          class="flex-1 w-full text-sm p-2 text-primary-texto outline-none ring-0 border-gray-300 ring-primary-200/60 focus:ring-1 focus:border-primary-200/60 border-b rounded-lg"
          rows="3"
          placeholder="Color, tamaño, categoria, trata o que describe al producto..."
          name="descripcion"
          id="descripcion"></textarea>
      </div>
    </div>
  </div>
  <div class="w-full flex gap-2 items-start justify-between">
    <ContenedorInputForm name="marca" label="Marca" type="text" />
    <ContenedorInputForm name="modelo" label="Modelo" type="number" />
    <ContenedorInputForm name="categoria" label="Categoria" type="text" />
    <ContenedorInputForm name="localizacion" label="Localizacion" type="text" />
  </div>
  <div class="w-full flex gap-2 items-start justify-between">
    <ContenedorInputForm name="pCompra" label="Precio Compra" type="number" />
    <ContenedorInputForm name="pVenta" label="Precio Venta" type="number" />
    <ContenedorInputForm name="stock" label="Stock" type="number" />
    <ContenedorInputForm
      name="cantidadAlerta"
      label="Cantidad de Alerta"
      type="number"
    />
  </div>
  <div class="w-full flex items-center justify-end my-3">
    <Button1 id="btnCargarProducto">Guardar</Button1>
  </div>
  <div
    class="text-xs font-semibold h-6 w-full text-center tracking-wide uppercase animate-aparecer text-primary-400"
    id="erroresMsg"
  >
  </div>
</FormCont>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const formulario = document.getElementById("formularioCargaProducto");
    const btnGuardar = document.getElementById("btnCargarProducto");
    const erroresMsg = document.getElementById("erroresMsg");
    const userId = document.getElementById("idCargaUsuario")?.dataset.inituser;
    if (!formulario || !btnGuardar || !erroresMsg || !userId) {
      console.error("Faltan elementos clave en el DOM");
      return;
    }


    let fileData: File | null = null; // Declaramos el tipo explícitamente

    const inputFile = document.getElementById('fotoProducto');
    inputFile?.addEventListener('change', (event) => {
      const file = event.target.files[0];
      if (file && file.type.startsWith("image/")) {
        fileData = file; // Guardamos el archivo para usarlo después
        console.log("Archivo de imagen válido:", file.name);
      } else {
        console.error("Por favor selecciona un archivo de imagen válido");
        event.target.value = '';
        fileData = null;
      }
    });

    formulario.addEventListener("submit", async (e) => {
      e.preventDefault();

      const formData = new FormData(formulario);

      
      if (fileData) {
        formData.set('fotoProducto', fileData);
      }
      // Opcional: Verificar contenido del FormData
      for (const [key, value] of formData.entries()) {
        console.log(`${key}:`, value);
      }

      // Validación de campos obligatorios
      const requiredFields = [
        "codigoBarra",
        "descripcion",
        "pCompra",
        "pVenta",
        "stock",
        "cantidadAlerta",
      ];

      for (const field of requiredFields) {
        if (!formData.get(field)) {
          erroresMsg.textContent = "Todos los campos son obligatorios";
          return;
        }
      }
      // Agregar userId al FormData
      formData.append("userId", userId);
      try {
        const response = await fetch("/api/productos/create", {
          method: "POST",
          body: formData, // El navegador gestiona el Content-Type automáticamente
        });

        if (!response.ok) {
          const errorData = await response.json();
          erroresMsg.textContent = errorData.msg || "Error en el servidor";
          return;
        }

        const dataResponse = await response.json();
        console.log(dataResponse);

        if (dataResponse.status === 200) {
          formulario.reset();
          window.location.reload();
        } else {
          erroresMsg.textContent =
            dataResponse.msg || "Error al guardar el producto";
        }
      } catch (error) {
        console.error("Error al enviar el formulario:", error);
        erroresMsg.textContent = "Ocurrió un error inesperado";
      }
    });
  });
</script>
