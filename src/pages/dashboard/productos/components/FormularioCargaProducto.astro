---
import BotonGuardar from '../../../../components/atomos/BotonGuardar';
import FormCont from '../../../../components/atomos/FormCont.astro';
import LabelForm from '../../../../components/atomos/LabelForm.astro';
import ContenedorInputForm from '../../../../components/moleculas/ContenedorInputForm.astro';
import ContenedorInputSelected from '../../../../components/moleculas/ContenedorInputSelected.astro';
import InputFile from '../../../../components/moleculas/InputFile';
import CategoriasSelector from './CategoriasSelector';

const { user } = Astro.locals;

const impuestos = [
  {
    id: '1',
    name: '21% IVA',
    value: 21,
    defaultSelect: true,
  },
  {
    id: '2',
    name: '27% IVA',
    value: 27,
  },
  {
    id: '3',
    name: '10.5% IVA',
    value: 10.5,
  },
  {
    id: '4',
    name: 'No Aplica',
    value: 0,
  },
];

const unidadMedida = [
  {
    id: '3',
    name: 'Unidad',
    value: 'unidad',
  },
  {
    id: '1',
    name: 'Kilogramo',
    value: 'kilogramo',
  },
  {
    id: '2',
    name: 'Litro',
    value: 'litro',
  },
  {
    id: '4',
    name: 'decena',
    value: 'decena',
  },
  {
    id: '5',
    name: 'No Aplica',
    value: 'no aplica',
  },
];
---

<FormCont title="Agregar Producto" id="formularioCargaProducto">
  <div
    id="idCargaUsuario"
    data-user-id={user.id}
    data-empresa-id={user.empresaId}
    class="w-full flex md:flex-col flex-row gap-2 items-start justify-between"
  >
    <ContenedorInputForm
      name="codigoBarra"
      type="text"
      label="Código de barra"
      required
    />
    <div class="w-full flex items-start my-2 duration-300 group">
      <div class="w-full flex gap-2 items-center justify-center">
        <InputFile client:load name="fotoProducto" />
      </div>
      <div class="w-full flex flex-col gap-2 items-start justify-between">
        <LabelForm name="descripcion">Descripción</LabelForm>
        <textarea
          class="flex-1 w-full text-sm p-2 text-primary-texto outline-none ring-0 border-gray-300 ring-primary-200/60 focus:ring-1 focus:border-primary-200/60 border-b rounded-lg"
          rows="3"
          placeholder="Color, tamaño, categoria, trata o que describe al producto..."
          name="descripcion"
          id="descripcion"
          required></textarea>
      </div>
    </div>
  </div>
  <div class="w-full flex gap-2 items-center justify-between">
    <ContenedorInputForm name="marca" label="Marca" type="text" />
    <ContenedorInputForm name="modelo" label="Modelo" type="number" />
    <CategoriasSelector client:load empresaId={user.empresaId} />
  </div>
  <div class="w-full flex gap-2 items-start justify-between">
    <ContenedorInputForm name="localizacion" label="Localizacion" type="text" />
    <ContenedorInputForm
      name="deposito"
      value="deposito 1"
      label="Deposito"
      type="text"
    />
    <ContenedorInputSelected
      options={unidadMedida}
      label="Unidad de Medida"
      defaultSelect={true}
    />
  </div>

  <div class="w-full flex gap-2 items-start justify-between">
    <ContenedorInputForm name="pCompra" label="Precio Compra" type="number" />
    <ContenedorInputForm name="pVenta" label="Precio Venta" type="number" />

    <ContenedorInputSelected
      options={impuestos}
      name="iva"
      label="iva"
      defaultSelect={true}
    />
    <ContenedorInputForm name="descuento" label="Descuento" type="text" />
  </div>
  <div class="w- flex gap-2 items-start justify-between">
    <ContenedorInputForm name="stock" label="Stock" type="number" />
    <ContenedorInputForm
      name="alertaStock"
      label="Cantidad de Alerta"
      type="number"
    />
  </div>

  <div class="w-full flex items-center justify-end my-3">
    <BotonGuardar client:load id="btnCargarProducto" type="submit">
      Guardar
    </BotonGuardar>
  </div>
  <div
    class="text-xs font-semibold h-6 w-full text-center tracking-wide uppercase animate-aparecer text-primary-400"
    id="erroresMsg"
  >
  </div>
</FormCont>

<script>
  interface FormElements extends HTMLFormControlsCollection {
    fotoProducto: HTMLInputElement;
    codigoBarra: HTMLInputElement;
    descripcion: HTMLTextAreaElement;
    // ... otros campos
  }

  interface ProductoForm extends HTMLFormElement {
    readonly elements: FormElements;
  }

  document.addEventListener('DOMContentLoaded', () => {
    const formulario = document.getElementById(
      'formularioCargaProducto'
    ) as ProductoForm;
    const btnGuardar = document.getElementById('btnCargarProducto');
    const erroresMsg = document.getElementById('erroresMsg');
    const userIdElement = document.getElementById('idCargaUsuario');
    const empresaIdElement = document.getElementById('idCargaUsuario');
    const userId = userIdElement?.dataset.userId;
    const empresaId = empresaIdElement?.dataset.empresaId;

    if (!formulario || !btnGuardar || !erroresMsg || !userId) {
      console.error('Error: Elementos del DOM no encontrados');
      return;
    }

    let fileData: File | null = null;

    // Manejador del input file
    formulario.elements.fotoProducto?.addEventListener(
      'change',
      (event: Event) => {
        const input = event.target as HTMLInputElement;
        const file = input.files?.[0];

        if (file && file.type.startsWith('image/')) {
          fileData = file;
          console.log('Imagen seleccionada:', file.name);
        } else {
          console.error('Por favor selecciona un archivo de imagen válido');
          input.value = '';
          fileData = null;
        }
      }
    );

    // Validación y envío del formulario
    formulario.addEventListener('submit', async (e: SubmitEvent) => {
      e.preventDefault();

      try {
        const formData = new FormData(formulario);

        // Validaciones
        const requiredFields = [
          'codigoBarra',
          'descripcion',
          'pCompra',
          'pVenta',
          'stock',
        ];
        const missingFields = requiredFields.filter(
          (field) => !formData.get(field)
        );

        if (missingFields.length > 0) {
          throw new Error(
            `Campos requeridos faltantes: ${missingFields.join(', ')}`
          );
        }

        if (fileData) {
          formData.set('fotoProducto', fileData);
        }
        formData.append('userId', userId);
        formData.append('empresaId', empresaId);

        const response = await fetch('/api/productos/create', {
          method: 'POST',
          body: formData,
        });

        const data = await response.json();

        if (!response.ok) {
          throw new Error(data.msg || 'Error en el servidor');
        }

        if (data.status === 200) {
          formulario.reset();
          window.location.reload();
        } else {
          throw new Error(data.msg || 'Error al guardar el producto');
        }
      } catch (error) {
        console.error('Error:', error);
        erroresMsg.textContent =
          error instanceof Error ? error.message : 'Error inesperado';
      }
    });
  });
</script>
