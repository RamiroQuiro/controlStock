---
import MainDashboard from "../../../../components/atomos/MainDashboard.astro";
import DivBox1 from "../../../../components/atomos/DivBox1.astro";
import StatsStock from "./StatsStock.astro";
import {
  ChartColumnDecreasing,
  Package,
  Sticker,
  StickyNote,
} from "lucide-react";
import H2 from "../../../../components/atomos/H2.astro";
import ListradoProductos from "./ListradoProductos.astro";
import ContenedorTablaTopEgreso from "./ContenedorTablaTopEgreso.astro";
import db from "../../../../db";
import { clientes, productos, proveedores, proveedores, stockActual } from "../../../../db/schema";
import {  eq } from "drizzle-orm";
import { formateoMoneda } from "../../../../utils/formateoMoneda";
import Etiquetas from "../../../../components/atomos/Etiquetas.astro";
import FormularioIngresoEgreso from "../../../../components/moleculas/FormularioIngresoEgreso";
import ModalComponents from "../../../../components/moleculas/ModalComponents";
import Modal from "../../../../components/moleculas/Modal.astro";

const user={id:"1",nombre:"ramiro"}

let queryDB=[]
let productosStockBajos=[]
let totalStockPrecio=0
let totalStockCosto=0
const trayendoProductos = async (userId) => {
  const dataDB = await db.transaction(async(trx)=>{
    const listaProductos=  await trx.select({
      id: productos.id,
      codigoBarra: productos.codigoBarra,
      descripcion: productos.descripcion,
      categoria: productos.categoria,
      pCompra: productos.pCompra,
      pVenta: productos.pVenta,
      stock: productos.stock,
      srcPhoto:productos.srcPhoto,
      localizacion:stockActual.localizacion,
      alertaStock:stockActual.alertaStock,
      ultimaActualizacion: productos.ultimaActualizacion,
      })
    .from(productos)
    .innerJoin(stockActual,eq(stockActual.productoId,productos.id))
    .where(eq(productos.userId, userId))
  
  const proveedoresData=await trx.select().from(proveedores).where(eq(proveedores.userId,userId))
  const clientesData= await trx.select().from(clientes).where(eq(clientes.userId,userId))
return {listaProductos,proveedoresData,clientesData}  
})
    return dataDB;
};
// consultar si es mejor hacerlo en la base de datos esta condicion
const obtenerStockBajoProductos=(array:[])=>{
    return array.filter((prod)=>prod.stock<=prod.alertaStock)
}

try {
queryDB= await trayendoProductos(user.id)

productosStockBajos=obtenerStockBajoProductos(queryDB?.listaProductos)
  
 totalStockPrecio= queryDB?.listaProductos?.reduce(
      (acc, producto) => acc + producto.pVenta * producto.stock,
      0
    );
    totalStockCosto= queryDB?.listaProductos?.reduce(
      (acc, producto) => acc + producto.pCompra * producto.stock,
      0
    );

} catch (error) {
  console.log(error)
}
const  {listaProductos,proveedoresData,clientesData}=queryDB
const infoStats = [
  {
    icono: Package,
    h2: listaProductos?.length,
    bgColor: "from-primary-100 to-blue-700",
    title: "Productos en Stock",
  },
  {
    h2: productosStockBajos.length,
    icono: ChartColumnDecreasing,
    bgColor: "from-red-400 to-amber-700",
    title: "Productos de Stock bajo",
  },
  {
    icono: Sticker,
    h2: formateoMoneda.format(totalStockPrecio),
    bgColor: "from-lime-500 to-lime-700",
    title: "Precio del Stock",
  },
  {
    icono: StickyNote,
    h2: formateoMoneda.format(totalStockCosto),
    bgColor: "from-orange-400 to-orange-700",
    title: "Costo del Stock",
  },
];


---

<MainDashboard h1="Stock">
  <DivBox1 styleDiv="w-full">
    <div class="w-full flex items-center justify-between gap-2">
      {
        infoStats.map((info, index) => {
          let Icon = info.icono;
          return (
            <StatsStock
              icon={Icon}
              h2={info.h2}
              bgColor={info.bgColor}
              key={index}
            >
              {info.title}
            </StatsStock>
          );
        })
      }
    </div>
  </DivBox1>
  <DivBox1 styleDiv="mt-3 w-full">
    <div class="flex items-center justify-evenly w-full">


    <Modal id="modalIngreso" label="Ingreso">
        <FormularioIngresoEgreso tipo="Ingreso" proveedoresData={proveedoresData} clientesData={clientesData} listaProductos={listaProductos} userId={user.id}  client:visible/>
    </Modal>
    <Modal id="modalEgreso" label="egreso">
        <FormularioIngresoEgreso tipo="egresol" client:visible/>
    </Modal>
    </div>
  </DivBox1>
  <div class="flex w-full mt-3 gap-2 items-start justify-start">
    <ListradoProductos productosArray={listaProductos} />
    <DivBox1 styleDiv="w-1/3">
      <div class="flex items-center justify-between gap-2">
        <H2>Top Egresos</H2>
      </div>
      <ContenedorTablaTopEgreso />
    </DivBox1>
  </div>
</MainDashboard>
